openapi: 3.0.0
info:
  title: Booking Event API - Admin Routes
  version: 1.2.0
  description: Administrative and public routes for managing users and events

paths:
  /admin/accounts:
    get:
      summary: Retrieve all user accounts (admin access)
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '500':
          description: Server error

  /admin/add/events:
    post:
      summary: Add a new event (admin only)
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '201':
          description: Event successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Event already exists or invalid input
        '500':
          description: Server error

  /view/events:
    get:
      summary: Retrieve all events (public access)
      tags:
        - Events
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
          description: Server error

  /view/events/{id}:
    get:
      summary: Retrieve a specific event by ID
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: ID of the event
      responses:
        '200':
          description: Event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
        '500':
          description: Server error

  /edit/events/{id}:
    patch:
      summary: Update an event by ID (admin only)
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: ID of the event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '200':
          description: Successfully updated the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid input or event ID format
        '404':
          description: Event not found
        '500':
          description: Server error

  /delete/events/{id}:
    delete:
      summary: Delete an event (admin only)
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  accountsUpdated:
                    type: number
        '404':
          description: Event not found
        '500':
          description: Server error

  /admin/update/ban/{id}:
    patch:
      summary: Update banDate and increment banCount for a user account (admin only)
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: ID of the user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                banDate:
                  type: string
                  format: date-time
                  description: New ban date for the account (optional)
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  account:
                    $ref: '#/components/schemas/Account'
        '400':
          description: Invalid banDate format
        '404':
          description: Account not found
        '500':
          description: Internal server error

components:
  schemas:
    Account:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
        banDate:
          type: string
          format: date-time
        banCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EventInput:
      type: object
      required:
        - title
        - price
        - description
        - location
        - maxPeople
        - date
      properties:
        price:
          type: string
          enum: ['FREE', 'number']
          description: "The price can either be 'FREE' or a numeric value."
        title:
          type: string
        description:
          type: string
        location:
          type: string
        maxPeople:
          type: number
        totalPeople:
          type: number
        date:
          type: string
          format: date-time

    Event:
      allOf:
        - $ref: '#/components/schemas/EventInput'
        - type: object
          properties:
            _id:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
