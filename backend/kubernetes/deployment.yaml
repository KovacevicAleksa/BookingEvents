# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_PASS
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_DB
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-storage

---
# Express API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: express-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: express-api
  template:
    metadata:
      labels:
        app: express-api
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:latest
          command:
            [
              "sh",
              "-c",
              "until pg_isready -h postgres -p 5432; do echo waiting for postgres; sleep 2; done;",
            ]
      containers:
        - name: express-api
          image: kovacevicaleksa/express-api:latest
          ports:
            - containerPort: 8080
          env:
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: uri
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: JWT_SECRET
            - name: EMAIL_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: EMAIL_USER
            - name: EMAIL_PASS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: EMAIL_PASS
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_USER
            - name: PG_PASS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_PASS
            - name: PG_DB
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_DB
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: kovacevicaleksa/express-nginx:latest
          ports:
            - containerPort: 8081
          resources: # Adding resource requests and limits
            requests:
              cpu: 100m # Minimum CPU requested
              memory: 64Mi # Minimum memory requested
            limits:
              cpu: 200m # Maximum CPU allowed
              memory: 128Mi # Maximum CPU allowed
          livenessProbe:
            httpGet:
              path: /health # Adjust this based on the health check path for your Nginx server
              port: 8081
            initialDelaySeconds: 25
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health # Adjust this based on the readiness check path for your Nginx server
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

---
# pgAdmin Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4:latest
          ports:
            - containerPort: 80
              name: http
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PGADMIN_EMAIL
            - name: PGADMIN_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PGADMIN_PASS
          volumeMounts:
            - mountPath: /var/lib/pgadmin
              name: pgadmin-storage
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          startupProbe:
            httpGet:
              path: /misc/ping
              port: 80
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /misc/ping
              port: 80
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /misc/ping
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]
      volumes:
        - name: pgadmin-storage
          persistentVolumeClaim:
            claimName: pgadmin-storage
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: kovacevicaleksa/react-frontend:latest # Update this with your frontend image
          ports:
            - containerPort: 3000
          env:
            - name: REACT_APP_API_URL
              value: "http://express-api:8080" # Points to the express-api service
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 300m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
              name: http-grafana
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: GRAFANA_PASSWORD
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_USER
            - name: PG_PASS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_PASS
            - name: PG_DB
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_DB
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-config
              mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              subPath: datasources.yaml
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 5
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-config
          configMap:
            name: grafana-config
