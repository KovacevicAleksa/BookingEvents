# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_PASS
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_DB
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-storage

---
# Express API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: express-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: express-api
  template:
    metadata:
      labels:
        app: express-api
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command:
            [
              "sh",
              "-c",
              "until nc -z -w 2 postgres 5432; do echo waiting for postgres; sleep 2; done;",
            ]
      containers:
        - name: express-api
          image: kovacevicaleksa/express-api:latest
          ports:
            - containerPort: 8080
          env:
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: uri
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: JWT_SECRET
            - name: EMAIL_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: EMAIL_USER
            - name: EMAIL_PASS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: EMAIL_PASS
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_USER
            - name: PG_PASS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_PASS
            - name: PG_DB
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_DB
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3

---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: kovacevicaleksa/express-nginx:latest
          ports:
            - containerPort: 8081
          resources: # Adding resource requests and limits
            requests:
              cpu: 100m # Minimum CPU requested
              memory: 64Mi # Minimum memory requested
            limits:
              cpu: 200m # Maximum CPU allowed
              memory: 128Mi # Maximum CPU allowed
          livenessProbe:
            httpGet:
              path: /health # Adjust this based on the health check path for your Nginx server
              port: 8081
            initialDelaySeconds: 25
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health # Adjust this based on the readiness check path for your Nginx server
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3

---
# pgAdmin Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4:latest
          ports:
            - containerPort: 80
              name: http
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PGADMIN_EMAIL
            - name: PGADMIN_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PGADMIN_PASS
          volumeMounts:
            - mountPath: /var/lib/pgadmin
              name: pgadmin-storage
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          startupProbe:
            httpGet:
              path: /misc/ping
              port: 80
            failureThreshold: 30
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /misc/ping
              port: 80
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /misc/ping
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]
      volumes:
        - name: pgadmin-storage
          persistentVolumeClaim:
            claimName: pgadmin-storage
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: kovacevicaleksa/react-frontend:latest # Update this with your frontend image
          ports:
            - containerPort: 3000
          env:
            - name: REACT_APP_API_URL
              value: "http://express-api:8080" # Points to the express-api service
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 300m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3001
              name: http-grafana
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: GRAFANA_PASSWORD
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-config-ini
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              subPath: datasources.yaml
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3001
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 60
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3001
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 60
            failureThreshold: 10
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-config-ini
          configMap:
            name: grafana-config
            items:
              - key: grafana.ini
                path: grafana.ini
        - name: grafana-datasources
          configMap:
            name: grafana-config
            items:
              - key: datasources.yaml
                path: datasources.yaml
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      initContainers:
        - name: init-chown-data
          image: busybox
          command: ["sh", "-c"]
          args:
            - chown -R 65534:65534 /prometheus;
              chmod -R 755 /prometheus;
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
          ports:
            - containerPort: 9090
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 300    # 1 min
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 60    # 1 min
            failureThreshold: 3
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/
            - name: prometheus-storage
              mountPath: /prometheus
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-storage
---
# Server Go Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-backup-go
  labels:
    app: db-backup-go
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-backup-go
  template:
    metadata:
      labels:
        app: db-backup-go
    spec:
      initContainers:
        - name: wait-for-postgres-2
          image: busybox
          command:
            [
              "sh",
              "-c",
              "until nc -z -w 2 postgres 5432; do echo waiting for postgres; sleep 2; done;",
            ]
      containers:
      - name: db-backup-go
        image: kovacevicaleksa/db-backup-go:latest
        ports:
          - containerPort: 8181
        resources:
            requests:
              memory: "64Mi"
              cpu: "30m"
            limits:
              memory: "256Mi"
              cpu: "100m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              curl -sf http://localhost:8181/view/events && \
              curl -sf http://localhost:8181/view/accounts && \
              curl -sf http://localhost:8181/view/postgres-data
          initialDelaySeconds: 30 
          periodSeconds: 86400     # 24 sata
          timeoutSeconds: 30
          failureThreshold: 3

        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              curl -sf http://localhost:8181/view/events && \
              curl -sf http://localhost:8181/view/accounts && \
              curl -sf http://localhost:8181/view/postgres-data
          initialDelaySeconds: 30
          periodSeconds: 86400
          timeoutSeconds: 30
          failureThreshold: 3
        imagePullPolicy: Always
        volumeMounts:
          - mountPath: "/app/data"
            name: db-backup-storage
      volumes:
        - name: db-backup-storage
          persistentVolumeClaim:
            claimName: db-backup-data-pvc