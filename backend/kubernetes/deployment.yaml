# Persistent Volume for PostgreSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-storage
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/postgres

---
# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_PASS
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_DB
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-storage

---
# Express API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: express-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: express-api
  template:
    metadata:
      labels:
        app: express-api
    spec:
      containers:
        - name: express-api
          image: kovacevicaleksa/express-api:latest
          ports:
            - containerPort: 8080
          env:
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: uri
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: JWT_SECRET
            - name: EMAIL_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: EMAIL_USER
            - name: EMAIL_PASS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: EMAIL_PASS
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_USER
            - name: PG_PASS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_PASS
            - name: PG_DB
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PG_DB
          resources: # Adding resource requests and limits
            requests:
              cpu: 100m # Minimum CPU requested
              memory: 128Mi # Minimum memory requested
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: kovacevicaleksa/express-nginx:latest
          ports:
            - containerPort: 8081
          resources: # Adding resource requests and limits
            requests:
              cpu: 100m # Minimum CPU requested
              memory: 64Mi # Minimum memory requested
            limits:
              cpu: 200m # Maximum CPU allowed
              memory: 128Mi # Maximum CPU allowed
          livenessProbe:
            httpGet:
              path: /health # Adjust this based on the health check path for your Nginx server
              port: 8081
            initialDelaySeconds: 25
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health # Adjust this based on the readiness check path for your Nginx server
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

---
# pgAdmin Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4:latest
          ports:
            - containerPort: 80
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PGADMIN_EMAIL
            - name: PGADMIN_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: PGADMIN_PASS
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
